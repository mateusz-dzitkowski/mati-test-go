// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package thing

import (
	"context"
)

const createThing = `-- name: CreateThing :one
insert into thing (created, name, amount)
values (now(), $1, $2)
returning id, created, name, amount
`

type CreateThingParams struct {
	Name   string
	Amount int32
}

func (q *Queries) CreateThing(ctx context.Context, arg CreateThingParams) (Thing, error) {
	row := q.db.QueryRowContext(ctx, createThing, arg.Name, arg.Amount)
	var i Thing
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const getThing = `-- name: GetThing :one
select id, created, name, amount from thing where id = $1 limit 1
`

func (q *Queries) GetThing(ctx context.Context, id int32) (Thing, error) {
	row := q.db.QueryRowContext(ctx, getThing, id)
	var i Thing
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const listThings = `-- name: ListThings :many
select id, created, name, amount from thing order by id
`

func (q *Queries) ListThings(ctx context.Context) ([]Thing, error) {
	rows, err := q.db.QueryContext(ctx, listThings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thing
	for rows.Next() {
		var i Thing
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Name,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
