// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: edge.sql

package db

import (
	"context"
)

const createEdge = `-- name: CreateEdge :one
insert into edge (src, dst) values ($1, $2) returning id, src, dst
`

type CreateEdgeParams struct {
	Src int32
	Dst int32
}

func (q *Queries) CreateEdge(ctx context.Context, arg CreateEdgeParams) (Edge, error) {
	row := q.db.QueryRowContext(ctx, createEdge, arg.Src, arg.Dst)
	var i Edge
	err := row.Scan(&i.ID, &i.Src, &i.Dst)
	return i, err
}

const getEdge = `-- name: GetEdge :one
select id, src, dst from edge where id = $1 limit 1
`

func (q *Queries) GetEdge(ctx context.Context, id int32) (Edge, error) {
	row := q.db.QueryRowContext(ctx, getEdge, id)
	var i Edge
	err := row.Scan(&i.ID, &i.Src, &i.Dst)
	return i, err
}

const getEdges = `-- name: GetEdges :many
select id, src, dst from edge
`

func (q *Queries) GetEdges(ctx context.Context) ([]Edge, error) {
	rows, err := q.db.QueryContext(ctx, getEdges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Edge
	for rows.Next() {
		var i Edge
		if err := rows.Scan(&i.ID, &i.Src, &i.Dst); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
